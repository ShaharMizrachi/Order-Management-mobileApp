import {createSlice, PayloadAction} from '@reduxjs/toolkit';
import {
  Order,
  OrderPerCustomer,
  ProductOrder,
  Customer,
  Product,
} from './types';

interface ActiveOrderState {
  newOrder: Order;
}

const initialState: ActiveOrderState = {
  newOrder: {
    orderPerCustomer: [],
    date: new Date(),
  },
};

const activeOrderSlice = createSlice({
  name: 'activeOrder',
  initialState,
  reducers: {
    // Action to add a customer to the order
    addCustomerToOrder(state, action: PayloadAction<Customer>) {
      state.newOrder.orderPerCustomer.push({
        customer: action.payload,
        productOrder: [], // Start with an empty product order array for the new customer
      });
    },
    // Action to add a product to a customer's order
    addProductToCustomerOrder(
      state,
      action: PayloadAction<{customerId: number; productOrder: ProductOrder}>,
    ) {
      state.newOrder.orderPerCustomer = state.newOrder.orderPerCustomer.filter(
        order => order.customer.id !== action.payload.customerId,
      );
    },
    // Action to reset the order
    resetOrder(state) {
      state.newOrder = {
        orderPerCustomer: [],
        date: new Date(),
      };
    },
    removeCustomerFromOrder(
      state,
      action: PayloadAction<{customerId: number}>,
    ) {
      const customerToRemove = state.newOrder.orderPerCustomer.find(
        order => order.customer.id === action.payload.customerId,
      );
    },
  },
});

// Export the actions generated by createSlice
export const {addCustomerToOrder, addProductToCustomerOrder, resetOrder} =
  activeOrderSlice.actions;

// Export the reducer to add it to the store
export default activeOrderSlice.reducer;
